

// complex phase diagram of  fz = (z^3 - 1) * (z - 1)
vec3 col (in float x, in float y)
{
    vec2 z  = vec2(sin(x),cos(y));
    vec2 fz = cdiv(z + vec2(sin(mouse.x),cos(mouse.y)), z - vec2(sin(mouse.x),cos(mouse.y)));
    float t = atan(fz.y,fz.x)/6.28 + 0.5;
    return hsv2rgb(vec3(t,0.9,0.9));
}


// zooming out patterns
vec3 col(in float x, in float y)
{
    float left  = tan(x)+cos(x*y);
    float right = 1.0;
    return hsv2rgb(vec3(0.1, 0.9, left*right));
}


vec3 col (in float x, in float y)
{
    vec2 z  = vec2(mouse.x,mouse.y);
    vec2 fz = cdiv(z + vec2(x,y), z - vec2(sin(x),y));
    float t = atan(fz.y,fz.x)/6.28 + 0.5;
    return hsv2rgb(vec3(t,0.9,0.9));
}


float man(in float x, in float y)
{
    vec2 z = vec2(0.0);
    int i = 0;
    int n = 100;
    for (i=0 ; i<n ; ++i)
    {
        z = vec2(z.x*z.x - z.y*z.y + x, 2.0*z.x*z.y + y);
        if (length(z) > 2.0) break;
    }
    return (float(i)/float(n));
}


#define N 2
vec3 col(in float x, in float y)
{
    vec2 p[N];
    p[0] = vec2( 1.0, 1.0);
    p[1] = vec2(-1.0, 0.0);
    float a = 0.0;
    for (int i=0 ; i<N ; i++) a += atan(y-p[i].y, x-p[i].x);
    float t = fract(tan(2.5 * a));
    return hsv2rgb( vec3(0.1, 0.9, t) );
}



vec3 col(in float x, in float y)
{
    vec2 z = vec2(x, y);
    vec2 r0 = vec2(1.0, 0.0);
    vec2 r1 = vec2(-0.5,  sqrt(0.75));
    vec2 r2 = vec2(-0.5, -sqrt(0.75));
    int i = 0;
    int n = 10;
    for (i=0 ; i<n ; ++i)
    {
        // f(z) = z^3-1
        vec2 v = vec2(z.x*z.x*z.x - 3.0*z.x*z.y*z.y - 1.0, 3.0*z.x*z.x*z.y - z.y*z.y*z.y);
        // f'(z) = 3z^2;
        vec2 d = 3.0* vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y);
        // f(z) / f'(z)
        vec2 q = vec2(v.x*d.x + v.y*d.y, -v.x*d.y+v.y*d.x) / dot(d,d);
        
        z = z-q;
        //if (dot(z,r0) > 0.999 && dot(z,r0)<1.001) return vec3(float(n-i)/float(n),0.0,0.0);
        //if (dot(z,r1) > 0.999 && dot(z,r1)<1.001) return vec3(0.0,float(n-i)/float(n),0.0);
        //if (dot(z,r2) > 0.999 && dot(z,r2)<1.001) return vec3(0.0,0.0,float(n-i)/float(n));
        if (length(z-r0) < 0.001) return vec3(float(n-i)/float(n),0.0,0.0);
        if (length(z-r0) < 0.001) return vec3(0.0,float(n-i)/float(n),0.0);
        if (length(z-r0) < 0.001) return vec3(0.0,0.0,float(n-i)/float(n));
    }
    
    return vec3(1.0, 1.0, 1.0);
}

